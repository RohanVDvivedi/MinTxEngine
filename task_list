PICKED
  * allow mutating bufferpool & wale buffer frames, and variable number of active mini tranactions
  * limit free mini transactions to only the number of bufferpool frames curently in the bufferpool
  * no timeouts on allotting mini transactions
  * externally use resource_usage_limiter for limiting the number of active mini transactions

  * PAGE_ALLOCATION OPTIMIZATION
  * implement a cache for free space mapper page ids with most free pages in increasing order of their page ids, and use them for faster allocation
    * like a separate faster allocation case which checks these free space mapper pages first, then fall backs to current code
    * also update this cache when a new page is allocated or freed
    * this cache should be randomized to randomly select pages for allocation
    * do this caching while releasing latch on the free space mapper page
    * simple API like
      * void update_free_space_mapper_page_in_availability_cache_UNSAFE(mini_transaction_engine* mte, const void* free_space_mapper_page, uint64_t free_space_mapper_page_id); // to be called when ever you release a latch on the free space mapper page
      * uint64_t get_any_free_space_mapper_page_from_availability_cache_UNSAFE(mini_transaction_engine* mte); // return of 0, implies nothing available
        * this will not give you enough information as you also need to check that the corresponding page we decide to allocate also needs to be not write locked
    * POSSIBLE SOLUTION
      * use cachemap with pheap for priorities, priorities being the number of free pages for the corresponding free space mapper page
      * keys will be free space mapper page id -> number of free pages pointed by it
      * always insert a new one if the min of these caches free space page mapper id's free pages count is lesser than the new element
      * use a fixed length array managed with a free singlylist for allocation, no further allocations to be made