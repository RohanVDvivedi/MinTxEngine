PICKED
 * add current_writerLSN for full page write log record
 * build another utility function that performs full page write log record for a page if it is necessary
   * refactor the wale_only functions to use this utility instead
 * page compaction log record persistently write locks the page
 * perform recalculate checksum outside of the global lock

 * implement both bufferpool and wale related functions
   * start by implementing a new apge allocation deallocation util
   * free page, and release lock pages with freeing them
     * implement a free page util that frees a page with write lock on the page held, and use it in release lock and free page calls
     * get shared lock on the manager_lock
     * get page and page_id of this page
     * ensure that page_id < database_page_count
     * get lock on the free space mapper page
     * if deemed necessary full page write both the pages
     * reset the free bit to 0 value
     * log the deallocation and quit
   * acquire new page with write lock
     * get shared manager lock
       * start iterating over all the free space mapper pages that are within database_page_count bounds
       * find a free page from the free space mapper page, which is also within bounds of databse_page_count
       * check that it is not write locked, else skip
       * once a right one is found, if deemed required full page write both the pages
       * then mark that page allocated by setting the bit to 1, and setting the writerLSN on the actual page
       * then log allocation record, release lock on free space mapper page and quit
     * if this fails acquire exclusive lock on manager lock
       * ensure that database_page_count < max_page_count
       * if so allocate 1 page if the new page is not a free space mapper page, else allocate 2 pages, with overwrite flag set
       * log full page write for both the pages
       * then mark that page allocated by setting the bit to 1, and setting the writerLSN on the actual page
       * then log allocation record, release lock on free space mapper page and quit
   * always skip pages (while allocating and deallocating) that are write locked by other active mini transactions
   * maintain database_page_count variable and bump it when you allocate a brand new page, when no pages are available -> to be done with exclusive lock on the manager held
     * fail if you have reached max page count
 
 * implement utility function to get a parsed log record given the log sequence number, from all the available wales
 * implement complete_mini_transaction function
   * if the mini_tx_id == INVALID, it is a reader transaction, nothing needs to be done
   * if transaction is in IN_PROGRESS state, put COMPLETE_MINI_TX log record and flush all logs 
   * if transaction is in UNDOING_FOR_ABORT state, put ABORT_MINI_TX log record, start undoing from where you left off un til you reach COMPLETE_MINI_TX log record
     * if lastLSN is a regular modification log record put ABORT_MINI_TX log record and flush all log records
     * if lastLSN is ABORT_MINI_TX, start a loop from its previous log record
     * if lastLSN is CLR, start a loop from is next_log_record_to_undo
     * do it until you read the log record whose prev_log_record_LSN is INVALID
     * then finally put COMPLETE_MINI_TX log record and flush all log records
 * implement recovery function that gets called every time you initialize the mini transaction engine
  * analyze, redo then mark all active mini transactions to UNDOING_FOR_ABORT with reason being crash and then call complete_mini_transaction on all active writer transactions
 * mini_transaction allotter
   * wait if there are no element free_mini_transactions_list
   * fail wait if the mini_transaction engine is marked for shutdown, after marking for shutdown wake up all waiters waiting for new slot
   * deinitialize_mini_transaction_engine waits for all mini_transactions to be returned
   * also kill the checkpointer thread
 * write test case where you build a bplus tree and then delete the databse file and try reconstructing the complete database using the logs, then compare the database files, or print the bplus tree
 * implement a deinitialize function for mini transaction engine
 * add a flag suggesting shutdown of the mini transaction engine
 * fail all new calls if the shut_down flag is set, and wait for shutdown by taking a manager exclusive lock
 * implement checkpointing and management tasks to be done periodically
   * if wale file is full create a new one and add it to wa_list
   * add a checkpoint log record
   * calculate the minimum visible LSN and remove log files that are no longer visible
   * count the number of pages that can be truncated in database file (free space mapper page always truncatable, data pages truncatable if free and not write locked) and truncate this file

 FAR FUTURE 
 * remove headers not required for public api from publicly installed headers


Tasks necessary to develop MinTxEngine
 * checkpointing is done by writing the mini transaction table and dirty page table to the WALe as a check point record
 * there has to be a module to allocate and deallocate pages
   * pages are maintained as bitmap
   * there N bits can fit in a allocation bitmap page, then it stores is valid bit for that many pages after that
   * i.e. so our extent size is N+1, where every % N+1-th page is an allocation bitmap page -> 0 being free and 1 being valid
   * thses bit maps are protected by the corresponding page locks
   * bitmap pages can not be persistently locked
   * to allocate
     * scan all allocation bitmap pages, find is_valid = 0 page id,
     * write log record suggesting a the allocation for this page id
     * grab write lock on the actual page, write writer_min_tx_id
     * set the is_valid bit in the allocation bitmap for page_id
     * mark both the pages as dirty in dirty page table and also through the call back of Bufferpool
     * release lock on allocation bitmap page, return the allocated page with write lock to the user
   * to free
     * if a the page is not locked, grab write lock on it
     * if it is already write locked nothing ot be done, if it is read locked attempt to upgrade the lock -> upgrading the write lock may result in abort so handle that
     * find the corresponding is_valid bitmap page for this page_id
     * flip the is_valid bit to 0
     * update the page with write writer_min_tx_id
     * update the pageLSn of the allocation bitmap page
     * mark both the pages as dirty in dirty page table and also through the call back of Bufferpool
     * release lock on both the pages
   * note here pageLSN is updated on the allocation bitmap page and writer_min_tx_id is written on the actual page (marking its lock by the current mini transaction)
 * check pointing occurs every T minutes
   * there has to be a check pointing reader/writer lock
   * taken by every one in shared mode and the checkpointer as exclusive mode
   * a checkpoint log record is written
   * discard any WALe files whose log records are not visible/required by anyone
   * truncate the Bufferpool file if the last extent is all is_valid = 0 bits
 * atlast there is a recovery function that must be called as the first line of your application, it recovers from crash
 * add a disk pager module that is allocation module plus Bufferpool + No logging page modification methods + a truncate functionality
   * to be used by transaction and lock table, i.e. non persistent storage of the database for higher level fuinctions